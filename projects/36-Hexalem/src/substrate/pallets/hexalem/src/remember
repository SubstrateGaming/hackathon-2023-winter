
//! Autogenerated weights for `pallet_hexalem`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-21, STEPS: `2`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Rostislavs-MBP`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/hexalem
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_hexalem
// --extrinsic
// *
// --steps
// 2
// --repeat
// 10
// --output
// pallets/hexalem/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn create_game(m: u32, n: u32) -> Weight;
}

/// Weight functions for `pallet_hexalem`.
pub struct HexalemWeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for HexalemWeightInfo<T> {
	/// Storage: `HexalemModule::GameStorage` (r:1 w:1)
	/// Proof: `HexalemModule::GameStorage` (`max_values`: None, `max_size`: Some(3277), added: 5752, mode: `MaxEncodedLen`)
	/// Storage: `HexalemModule::HexBoardStorage` (r:100 w:100)
	/// Proof: `HexalemModule::HexBoardStorage` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 99]`.
	fn create_game(m: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `6742 + n * (2612 Â±0)`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(24_133_333, 0)
			.saturating_add(Weight::from_parts(0, 6742))
			// Standard Error: 20_183
			.saturating_add(Weight::from_parts(5_333, 0).saturating_mul(m.into()))
			// Standard Error: 20_387
			.saturating_add(Weight::from_parts(3_394_276, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2612).saturating_mul(n.into()))
	}
}
