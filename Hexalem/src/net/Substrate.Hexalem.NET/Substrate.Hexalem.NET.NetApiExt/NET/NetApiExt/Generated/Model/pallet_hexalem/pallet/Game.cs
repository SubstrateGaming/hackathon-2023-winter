//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.pallet
{
    
    
    /// <summary>
    /// >> 126 - Composite[pallet_hexalem.pallet.Game]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class Game : BaseType
    {
        
        /// <summary>
        /// >> state
        /// </summary>
        private Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.pallet.EnumGameState _state;
        
        /// <summary>
        /// >> max_rounds
        /// </summary>
        private Substrate.NetApi.Model.Types.Primitive.U8 _maxRounds;
        
        /// <summary>
        /// >> round
        /// </summary>
        private Substrate.NetApi.Model.Types.Primitive.U8 _round;
        
        /// <summary>
        /// >> player_turn
        /// </summary>
        private Substrate.NetApi.Model.Types.Primitive.U8 _playerTurn;
        
        /// <summary>
        /// >> played
        /// </summary>
        private Substrate.NetApi.Model.Types.Primitive.Bool _played;
        
        /// <summary>
        /// >> players
        /// </summary>
        private Substrate.Hexalem.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5 _players;
        
        /// <summary>
        /// >> selection
        /// </summary>
        private Substrate.Hexalem.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 _selection;
        
        /// <summary>
        /// >> selection_size
        /// </summary>
        private Substrate.NetApi.Model.Types.Primitive.U8 _selectionSize;
        
        public Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.pallet.EnumGameState State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
            }
        }
        
        public Substrate.NetApi.Model.Types.Primitive.U8 MaxRounds
        {
            get
            {
                return this._maxRounds;
            }
            set
            {
                this._maxRounds = value;
            }
        }
        
        public Substrate.NetApi.Model.Types.Primitive.U8 Round
        {
            get
            {
                return this._round;
            }
            set
            {
                this._round = value;
            }
        }
        
        public Substrate.NetApi.Model.Types.Primitive.U8 PlayerTurn
        {
            get
            {
                return this._playerTurn;
            }
            set
            {
                this._playerTurn = value;
            }
        }
        
        public Substrate.NetApi.Model.Types.Primitive.Bool Played
        {
            get
            {
                return this._played;
            }
            set
            {
                this._played = value;
            }
        }
        
        public Substrate.Hexalem.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5 Players
        {
            get
            {
                return this._players;
            }
            set
            {
                this._players = value;
            }
        }
        
        public Substrate.Hexalem.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1 Selection
        {
            get
            {
                return this._selection;
            }
            set
            {
                this._selection = value;
            }
        }
        
        public Substrate.NetApi.Model.Types.Primitive.U8 SelectionSize
        {
            get
            {
                return this._selectionSize;
            }
            set
            {
                this._selectionSize = value;
            }
        }
        
        public override string TypeName()
        {
            return "Game";
        }
        
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(State.Encode());
            result.AddRange(MaxRounds.Encode());
            result.AddRange(Round.Encode());
            result.AddRange(PlayerTurn.Encode());
            result.AddRange(Played.Encode());
            result.AddRange(Players.Encode());
            result.AddRange(Selection.Encode());
            result.AddRange(SelectionSize.Encode());
            return result.ToArray();
        }
        
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            State = new Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.pallet.EnumGameState();
            State.Decode(byteArray, ref p);
            MaxRounds = new Substrate.NetApi.Model.Types.Primitive.U8();
            MaxRounds.Decode(byteArray, ref p);
            Round = new Substrate.NetApi.Model.Types.Primitive.U8();
            Round.Decode(byteArray, ref p);
            PlayerTurn = new Substrate.NetApi.Model.Types.Primitive.U8();
            PlayerTurn.Decode(byteArray, ref p);
            Played = new Substrate.NetApi.Model.Types.Primitive.Bool();
            Played.Decode(byteArray, ref p);
            Players = new Substrate.Hexalem.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT5();
            Players.Decode(byteArray, ref p);
            Selection = new Substrate.Hexalem.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1();
            Selection.Decode(byteArray, ref p);
            SelectionSize = new Substrate.NetApi.Model.Types.Primitive.U8();
            SelectionSize.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
